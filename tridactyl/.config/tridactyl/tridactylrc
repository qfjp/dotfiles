" General Settings
set configversion 2.0
set update.lastchecktime 1741739967176
set update.checkintervalsecs 86400
set update.lastnaggedversion 1.20.3
set update.nag true
set update.nagwait 7
set searchurls.ddg https://duckduckgo.com/?q=
set searchurls.ggl https://www.google.com/search?q=
set searchurls.wkpd https://en.wikipedia.org/wiki/Special:Search/
set searchurls.yt https://www.youtube.com/results?search_query=
set searchurls.amzn https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=
set searchurls.stp https://startpage.com/do/search?language=english&cat=web&query=
set searchurls.gtb https://github.com/search?utf8=âœ“&q=
set searchurls.sx https://searx.thegpm.org/search?q=
set searchurls.osm https://www.openstreetmap.org/search?query=
set searchurls.awiki https://wiki.archlinux.org/index.php?search=
unset searchurls.qwant
unset searchurls.gglky
unset searchurls.schlr
unset searchurls.ggleuk
unset searchurls.bng
unset searchurls.yho
unset searchurls.twtr
unset searchurls.amznuk
unset searchurls.cnrtl
unset searchurls.mdn
unset searchurls.gtwiki
unset searchurls.google
unset searchurls.googlelucky
unset searchurls.scholar
unset searchurls.googleuk
unset searchurls.bing
unset searchurls.duckduckgo
unset searchurls.yahoo
unset searchurls.twitter
unset searchurls.wikipedia
unset searchurls.youtube
unset searchurls.amazon
unset searchurls.amazonuk
unset searchurls.startpage
unset searchurls.github
unset searchurls.searx
unset searchurls.gentoo_wiki
set hintfiltermode vimperator-reflow
set searchengine ddg
set hintchars asdfghjkl
set storageloc sync
set smoothscroll true
set editorcmd kitty -- zsh -c "nvim %f '+normal%lGzv%c'"
set externalclipboardcmd wl-copy
set theme dark
set browser /usr/bin/zen-browser
set completions.Goto.autoselect true
set completions.Tab.autoselect true
set completions.Tab.statusstylepretty true
set completions.TabAll.autoselect true
set completions.Rss.autoselect true
set completions.Bmark.autoselect true
set completions.Sessions.autoselect true
set modeindicator false

" Binds
bind $ scrollto 100 x
bind ,<Space> nohlsearch
bind . repeat
bind : fillcmdline_notrail
bind ;# hint -#
bind ;; hint -;
bind ;A hint -A
bind ;I hint -I
bind ;M composite hint -pipe img src | jsb -p tri.excmds.tabopen('images.google.com/searchbyimage?image_url=' + JS_ARG)
bind ;O hint -W fillcmdline_notrail open
bind ;P hint -P
bind ;T hint -W fillcmdline_notrail tabopen
bind ;W hint -W fillcmdline_notrail winopen
bind ;a hint -a
bind ;b hint -b
bind ;c hint -c [class*="expand"],[class="togg"]
bind ;f hint -;
bind ;g# hint -q#
bind ;gA hint -qA
bind ;gI hint -qI
bind ;gP hint -qP
bind ;gS hint -qS
bind ;ga hint -qa
bind ;gb hint -qb
bind ;gi hint -qi
bind ;gk hint -qk
bind ;gp hint -qp
bind ;gr hint -qr
bind ;gs hint -qs
bind ;gv hint -qW mpvsafe
bind ;gw hint -qw
bind ;gy hint -qy
bind ;i hint -i
bind ;K hint -k
bind ;m composite hint -pipe img src | js -p tri.excmds.open('images.google.com/searchbyimage?image_url=' + JS_ARG)
bind ;o hint
bind ;p hint -p
bind ;r hint -r
bind ;s hint -s
bind ;t hint -W tabopen
bind ;v hint -W mpvsafe
bind ;w hint -w
bind ;y hint -y
bind ;z hint -z
bind << tabmove -1
bind <A-m> mute toggle
bind <A-p> pin
bind <AC-Escape> mode ignore
bind <AC-`> mode ignore
bind <AS-ArrowUp><AS-ArrowUp><AS-ArrowDown><AS-ArrowDown><AS-ArrowLeft><AS-ArrowRight><AS-ArrowLeft><AS-ArrowRight>ba open https://www.youtube.com/watch?v=M3iOROuTuMA
bind <C-6> tab #
bind <C-[> composite mode normal ; hidecmdline
bind <C-^> tab #
bind <C-a> urlincrement 1
bind <C-b> scrollpage -1
bind <C-d> scrollpage 0.5
bind <C-e> scrollline 10
unbind <C-f>
bind <C-h> back
bind <C-i> jumpnext
bind <C-j> tabnext
bind <C-k> tabprev
bind <C-n> tabnext
bind <C-p> tabprev
bind <C-l> forward
bind <C-o> jumpprev
bind <C-u> scrollpage -0.5
bind <C-x> urlincrement -1
bind <C-y> scrollline -10
bind <Escape> composite mode normal ; hidecmdline
bind <F1> help
bind <S-Escape> mode ignore
bind <S-Insert> mode ignore
bind >> tabmove +1
bind / fillcmdline find
bind ? fillcmdline find -?
bind n findnext --search-from-view
bind N findnext --search-from-view -?
bind gn findselect
bind gN composite findnext --search-from-view -?; findselect
bind ,<Space> nohlsearch
bind A bmark
bind B hinttabs
bind D composite tabprev; tabclose #
bind C composite tabprev; tabclose #
bind F hint -b
bind G scrollto 100
bind H home
bind J tabmove +1
bind K tabmove -1
bind L home
bind M gobble 1 quickmark
bind O current_url open
bind P clipboard tabopen
bind R reloadhard
bind S fillcmdline tabopen search
bind T current_url tabopen
bind U undo window
bind W current_url winopen
bind ZZ composite sanitise tridactyllocal; qall
bind [[ followpage prev
bind [c urlincrement -1
bind ]] followpage next
bind ]c urlincrement 1
bind ^ scrollto 0 x
bind a current_url bmark
bind b fillcmdline tab
bind d tabclose
bind c tabclose
bind f hint
bind g$ tablast
bind g0 tabfirst
bind g; changelistjump -1
bind g? rot13
bind gF hint -br
bind gH home true
bind gT tabprev
bind gU urlroot
bind g^ tabfirst
bind gf viewsource
bind gg scrollto 0
bind gh home
bind gi focusinput -l
bind gr reader
bind gt tabnext_gt
bind gu urlparent
bind gx$ tabclosealltoright
bind gx0 tabclosealltoleft
bind h scrollpx -50
bind j scrollline 10
bind k scrollline -10
bind l scrollpx 50
bind o fillcmdline open
bind p clipboard open
bind r reload
bind s fillcmdline open search
bind t fillcmdline tabopen
bind u undo
bind w fillcmdline winopen
bind x stop
bind yc clipboard yankcanon
bind ym clipboard yankmd
bind ys clipboard yankshort
bind yt clipboard yanktitle
bind yy clipboard yank
bind zI zoom 0.5 true
bind zM zoom 0.5 true
bind zO zoom -0.5 true
bind zR zoom -0.5 true
bind zi zoom 0.1 true
bind zm zoom 0.5 true
bind zo zoom -0.1 true
bind zr zoom -0.5 true
bind zz zoom 1
bind ;S hint -S
bind ;x hint -F e => { const pos = tri.dom.getAbsoluteCentre(e); tri.excmds.exclaim_quiet("xdotool mousemove --sync " + window.devicePixelRatio * pos.x + " " + window.devicePixelRatio * pos.y + "; xdotool click 1")}
bind ;X hint -F e => { const pos = tri.dom.getAbsoluteCentre(e); tri.excmds.exclaim_quiet("xdotool mousemove --sync " + window.devicePixelRatio * pos.x + " " + window.devicePixelRatio * pos.y + "; xdotool keydown ctrl+shift; xdotool click 1; xdotool keyup ctrl+shift")}
bind yq text2qr --timeout 5
bind yo clipboard yankorg
bind <C-v> nmode ignore 1 mode normal
bind g! jumble
bind ga tabaudio
bind ;k hint -K
bind <C-U> elementunhide
bind ;Y hint -cF img i => tri.excmds.yankimage(tri.urlutils.getAbsoluteURL(i.src))
bind ;h hint -h
bind v hint -h
bind ;V hint -V
bind ;d hint -W tabopen --discard
bind ;gd hint -qW tabopen --discard
bind ;gF hint -qb
bind ;gf hint -q
bind m gobble 1 markadd
bind ` gobble 1 markjump
bind ' gobble 1 markjump
bind --mode=normal <C-i> mode ignore
bind ;: hint -F e => { const pos = tri.dom.getAbsoluteCentre(e); tri.excmds.exclaim_quiet("xdotool mousemove --sync " + window.devicePixelRatio * pos.x + " " + window.devicePixelRatio * pos.y)}
bind ;g; hint -q;
unbind --mode=insert <C-i>
bind --mode=insert <C-e> editor
bind --mode=insert <Escape> composite unfocus | mode normal
bind --mode=insert <C-[> composite unfocus | mode normal
bind --mode=insert <AC-Escape> mode normal
bind --mode=insert <AC-`> mode normal
bind --mode=insert <S-Escape> mode ignore
bind --mode=input <Escape> composite unfocus | mode normal
bind --mode=input <C-[> composite unfocus | mode normal
bind --mode=input <AC-Escape> mode normal
bind --mode=input <AC-`> mode normal
bind --mode=input <S-Escape> mode ignore
bind --mode=input <C-e> editor
bind --mode=ex <C-n> ex.next_completion
bind --mode=ex <C-p> ex.prev_completion
bind --mode=ex <C-j> ex.next_completion
bind --mode=ex <C-k> ex.prev_completion
bind --mode=input <Tab> focusinput -n
bind --mode=input <S-Tab> focusinput -N
bind --mode=input ðŸ•·ðŸ•·INHERITSðŸ•·ðŸ•· imaps
unbind --mode=input <C-i>
bindurl wikiwand.com yy composite js document.location.href.replace("wikiwand.com/en","wikipedia.org/wiki") | clipboard yank
bindurl www.google.com gi composite focusinput -l ; text.end_of_line
bindurl ^https://web.whatsapp.com f hint -c [tabindex]:not(.two)>div,a
bindurl ^https://web.whatsapp.com F hint -bc [tabindex]:not(.two)>div,a
bind --mode=ignore <Escape> mode normal
bind --mode=ignore <S-Insert> mode normal
bind --mode=ignore <AC-Escape> mode normal
bind --mode=ignore <AC-`> mode normal
bind --mode=ignore <S-Escape> mode normal
bind --mode=ignore <C-o> nmode normal 1 mode ignore

" Subconfig Settings
seturl www.google.com followpagepatterns.next Next
seturl www.google.com followpagepatterns.prev Previous
seturl ^https://teams.microsoft.com superignore true
seturl ^https://teams.microsoft.com modeindicator false
seturl ^https://teams.live.com superignore true
seturl ^https://teams.live.com modeindicator false

" Aliases
alias copy wayland_clip_fix.sh -i
command alias command
alias au autocmd
alias aucon autocontain
alias audel autocmddelete
alias audelete autocmddelete
alias blacklistremove autocmddelete DocStart
alias b tab
alias clsh clearsearchhighlight
alias nohlsearch clearsearchhighlight
alias noh clearsearchhighlight
alias o open
alias w winopen
alias t tabopen
alias tabgroupabort tgroupabort
alias tabgroupclose tgroupclose
alias tabgroupcreate tgroupcreate
alias tabgrouplast tgrouplast
alias tabgroupmove tgroupmove
alias tabgrouprename tgrouprename
alias tabgroupswitch tgroupswitch
alias tabnew tabopen
alias tabm tabmove
alias tabo tabonly
alias tn tabnext_gt
alias bn tabnext_gt
alias tnext tabnext_gt
alias bnext tabnext_gt
alias tp tabprev
alias tN tabprev
alias bp tabprev
alias bN tabprev
alias tprev tabprev
alias bprev tabprev
alias tabfirst tab 1
alias tablast tab 0
alias bfirst tabfirst
alias blast tablast
alias tfirst tabfirst
alias tlast tablast
alias buffer tab
alias bufferall taball
alias bd tabclose
alias bdelete tabclose
alias quit tabclose
alias q tabclose
alias qa qall
alias sanitize sanitise
alias saveas! saveas --cleanup --overwrite
alias tutorial tutor
alias h help
alias unmute mute unmute
alias authors credits
alias openwith hint -W
alias ! exclaim
alias !s exclaim_quiet
alias containerremove containerdelete
alias colours colourscheme
alias colorscheme colourscheme
alias colors colourscheme
alias man help
alias !js fillcmdline_tmp 3000 !js is deprecated. Please use js instead
alias !jsb fillcmdline_tmp 3000 !jsb is deprecated. Please use jsb instead
alias get_current_url js document.location.href
alias current_url composite get_current_url | fillcmdline_notrail
alias stop js window.stop()
alias zo zoom
alias installnative nativeinstall
alias nativeupdate updatenative
alias mkt mktridactylrc
alias mkt! mktridactylrc -f
alias mktridactylrc! mktridactylrc -f
alias mpvsafe js -p tri.excmds.shellescape(JS_ARG).then(url => tri.excmds.exclaim_quiet('mpv --no-terminal ' + url))
alias drawingstop mouse_mode
alias exto extoptions
alias extpreferences extoptions
alias extp extpreferences
alias prefset setpref
alias prefremove removepref
alias tabclosealltoright tabcloseallto right
alias tabclosealltoleft tabcloseallto left
alias reibadailty jumble
alias hinttabs js -dÎ© /* :hinttabs -a to show tabs from all windows */ if (tri.hinttabs) { tri.hinttabs.showAndHint(JS_ARGS[1] === "-a"); } else { tri.hinttabs = {}; const h = tri.hinttabs; const cmdln = document.getElementById("cmdline_iframe"); const cmdwin = cmdln.contentWindow; const cmddoc = cmdln.contentDocument; const staticDir = cmdwin.origin + "/static/"; const theme = tri.config.get("theme"); let customtheme = tri.config.get("customthemes")[theme] || ""; const builtintheme = (customtheme === "" ? `<link rel="stylesheet" href="${staticDir+"themes/"+theme+"/"+theme+".css"}">` : ""); /* so much css in the blob <head>! */ /* it is possible to reuse a blob across tabs (of the same container), but most of the important stuff is done in onload and adding javascript to the iframe source might not be possible (haven't found a way anyway - csp) so not sure if retrieving the same blob (eg through tri.state) would be useful (apart from being kinda neat) */ /* long string containing css and html for the blob / iframe source */ const blob = new cmdwin.Blob([ `<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <link rel="stylesheet" href="${staticDir}css/content.css"> <link rel="stylesheet" href="${staticDir}css/hint.css"> <link rel="stylesheet" href="${staticDir}css/commandline.css"> ${builtintheme} <style> /* tab hints vars - can be overwritten by tridactyl theme */ :root { --tritab-font-size: 9pt; --tritab-font-family: var(--tridactyl-cmplt-font-family); /* iframe's body colour */ --tritab-dimmer-bg: var(--tridactyl-bg); --tritab-dimmer-opacity: 0.85; --tritab-total-width: 80%; /* left padding - leave enough room that the hint spans don't overlap tab info */ /* I've added a span with class TridactylHint and text ZZ to use as the margin instead */ --tritab-hintspan-padding: 0; --tritab-max-tabs: 20; /* https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/ */ --tritab-max-cols: 4; --tritab-col-min-width: 400px; --tritab-fg: var(--tridactyl-cmdl-fg); --tritab-bg: var(--tridactyl-cmdl-bg); --tritab-url-fg: var(--tridactyl-url-fg); --tritab-url-bg: none; --tritab-url-decoration: var(--tridactyl-url-text-decoration); --tritab-outline-color: var(--tridactyl-cmdl-fg); --tritab-incognito-outline-color: #8000d7; --tritab-faketab-outline: dimgrey; --tritab-faketab-bg: var(--tritab-bg); --tritab-ctrl-fg: var(--tridactyl-cmdl-fg); --tritab-ctrl-bg: var(--tridactyl-cmdl-bg); --tritab-ctrl-outline-color: var(--tridactyl-cmdl-fg); --tritab-active-fg: var(--tridactyl-of-fg); --tritab-active-bg: var(--tridactyl-of-bg); --tritab-active-outline-color: var(--tridactyl-of-fg); --tritab-active-decoration: underline; --tritab-url-active-fg: var(--tridactyl-of-fg); --tritab-url-active-bg: none; --tritab-ctrl-active-fg: var(--tridactyl-of-fg); --tritab-ctrl-active-bg: var(--tridactyl-of-bg); --tritab-ctrl-active-outline-color: var(--tridactyl-of-fg); --tritab-ctrl-active-decoration: underline; /* these affect the placement of the grid items */ --tritab-title-font-size: 1em; --tritab-url-font-size: 1em; --tritab-line-height: 1.4em; --tritab-grid-gap: 0.4em; --tritab-padding-top: 0.5em; --tritab-padding-bottom: 0.5em; --tritab-icon-size: 1em; --tritab-ctrls-top: 20px; --tritab-ctrls-tabs-gap: 0.5em; --tritab-ctrls-height: 1.5em; --tritab-tabs-top: calc(var(--tritab-ctrls-top) + var(--tritab-ctrls-tabs-gap)); /** * Calculated values. */ /* these few vars are used to calculate how many rows can fit on the screen, which is handy when it comes to the js part */ --calc-cell-height: calc( max( var(--tritab-line-height), var(--tritab-title-font-size), var(--tritab-icon-size) ) + max( var(--tritab-line-height), var(--tritab-url-font-size), var(--tritab-icon-size) ) ); --calc-cell-height-padded: calc(var(--calc-cell-height) + var(--tritab-padding-top) + var(--tritab-padding-bottom)); /* this gives the distance between rows, including gap size and padding */ /* used to set background-size which makes it a pixel value, which can be found through getComputedStyle() */ --calc-row-spacing: calc(var(--calc-cell-height-padded) + var(--tritab-grid-gap)); /* these let us have differing numbers of columns depending on the screen width */ /* https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/ */ --gap-count: calc(var(--tritab-max-cols) - 1); --total-gap-width: calc(var(--gap-count) * var(--tritab-grid-gap)); --grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--tritab-max-cols)); /* now we begin setting css rules proper */ font-size: var(--tritab-font-size); font-family: var(--tritab-font-family); color: var(--tritab-fg); } body { margin: 0; padding: 0; } #outermost { top: 0; position: fixed; width: 100%; height: 100%; z-index: 2147483646; } #gridalign { height: 100%; width: var(--tritab-total-width); margin: auto; } #dimmer { top: 0; position: fixed; width: 100%; height: 100%; background: var(--tritab-dimmer-bg); opacity: var(--tritab-dimmer-opacity); } #tabs { /* no effect but gives access to px value of tab spacing in js through getComputedStyle(...).getPropertyValue("background-size") */ background-size: var(--calc-row-spacing); display: grid; /* https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/ */ grid-template-columns: repeat(auto-fill, minmax(max(var(--tritab-col-min-width), var(--grid-item--max-width)), 1fr)); grid-gap: var(--tritab-grid-gap); width: 100%; overflow: clip; margin: auto; margin-top: var(--tritab-tabs-top); height: calc(var(--calc-row-spacing) * round(down, calc(100% - var(--tritab-tabs-top) / var(--calc-row-spacing)))); } #ctrls { position: absolute; top: 20px; display: grid; grid-template-columns: repeat(5, 1fr); grid-gap: var(--tritab-grid-gap); text-align: center; position: relative; } .HintSpanSpacer.TridactylHint { float: left; position: relative !important; visibility: hidden; } .TridactylTab, .TridactylTabCtrl { line-height: var(--tritab-line-height); overflow: clip; } .TridactylTab { height: var(--calc-cell-height); padding: var(--tritab-padding-top) 1em var(--tritab-padding-bottom) var(--tritab-hintspan-padding); } .TridactylTab, .TridactylTab.TridactylHintElem { outline-offset: -1px; outline: solid 1px var(--tritab-outline-color) !important; background: var(--tritab-bg) !important; } .TridactylTab.TridactylHintActive { text-decoration: var(--tritab-active-decoration); color: var(--tritab-active-fg) !important; background: var(--tritab-active-bg) !important; outline-offset: -1px; outline: solid 1px var(--tritab-active-outline-color) !important; } .TridactylTab.TridactylHintActive>.text>.url { color: var(--tritab-url-active-fg) !important; background: var(--tritab-url-active-bg) !important; } .TridactylTabCtrl { height: var(--tritab-ctrls-height); padding: var(--tritab-padding-top) 1.5em var(--tritab-padding-bottom) 1.5em; } .TridactylTabCtrl, .TridactylTabCtrl.TridactylHintElem { color: var(--tritab-ctrl-fg) !important; background: var(--tritab-ctrl-bg) !important; outline: solid 1px var(--tritab-ctrl-outline-color) !important; } .TridactylTabCtrl.TridactylHintActive { color: var(--tritab-ctrl-active-fg) !important; background: var(--tritab-ctrl-active-bg) !important; outline: solid 1px var(--tritab-ctrl-active-outline-color) !important; decoration: var(--tritab-ctrl-active-decoration) !important; } .TridactylTab.fake { background: var(--tritab-faketab-bg) !important; outline-color: var(--tritab-faketab-outline) !important; } .icons, .info { float: left; padding-right: 1em; height: 100%; } .text { display:block; align-content: center; white-space: nowrap; overflow: clip; text-overflow: ellipsis; } p { display:inline; } .title { font-size: var(--tritab-title-font-size); } .url { font-size: var(--tritab-url-font-size); color: var(--tritab-url-fg); background: var(--tritab-url-bg); text-decoration: var(--tritab-url-decoration); } img, .container { width: var(--tritab-icon-size); display: inline-block; } .container { height: var(--tritab-icon-size); mask-size: contain; background-size: contain; } </style> <style> ${customtheme} </style> </head> <body> <template id="tabTemplate"> <div class="TridactylTab TridactylTabHint"> <span class="TridactylHint HintSpanSpacer">ZZZ</span> <div class="info"> <p class="wintabindex">000</p> <br> <p class="prefix">000</p> </div> <div class="icons"> <div class="container"></div> <br> <img class="favicon"> </div> <div class="text"> <p class="title"></p> <br> <p class="url"></p> </div> </div> </template> <template id="fakeTabTemplate"> <div class="TridactylTab TridactylTabHint fake" tabid="fake"></div> </template> <div id="dimmer"></div> <div id="outermost"> <div id="gridalign"> <div id="ctrls"> <div id="prev" class="TridactylTabCtrl TridactylTabHint"><--</div> <div id="next" class="TridactylTabCtrl TridactylTabHint">--></div> <div id="close" class="TridactylTabCtrl TridactylTabHint">X</div> <div id="newtab" class="TridactylTabCtrl TridactylTabHint">+</div> <div id="search" class="TridactylTabCtrl TridactylTabHint">search</div> </div> <div id="tabs"></div> </div> </div> </body> </html>` ], { type: "text/html" }); /* create the blob url through the cmdline iframe's window to get a "blob:moz-extension://..." URL */ const blurl = cmdwin.URL.createObjectURL(blob); /* pretty sure this happens automatically anyway */ addEventListener("unload", () => URL.revokeObjectURL(blurl)); /* make the iframe, give it the blob src, have it fill the screen and ignore the mouse */ h.iframe = cmddoc.createElement("iframe"); h.iframe.src = blurl; h.iframe.style.position = "fixed"; h.iframe.style.top = 0; h.iframe.style.left = 0; h.iframe.style.width = "100%"; h.iframe.style.height = "100%"; h.iframe.style["z-index"] = 2147483646; h.iframe.style.border = "none"; h.iframe.scrolling = "no"; h.iframe.style["pointer-events"] = "none"; h.iframe.style.display = "none"; document.documentElement.appendChild(h.iframe); /* can't put javascript in the iframe source so add everything once it's loaded */ h.iframe.onload = () => { const w = h.iframe.contentWindow; const d = h.iframe.contentDocument; const tabGrid = { el: d.getElementById("tabs"), first: 0, rangeStyle: d.createElement("style"), }; /* let tab grid be accessed through the iframe's content window (for testing mainly) */ w.newTabGrid = tabGrid; /* rangeStyle sets which grid cells are visible */ d.head.appendChild(tabGrid.rangeStyle); /* this is used with next() and prev() to change which tabs are shown */ tabGrid.setRange = (from, to) => tabGrid.rangeStyle.textContent = `.TridactylTab:nth-child(-n+${from}), .TridactylTab:nth-child(n+${to+1}) { display:none; }`; tabGrid.next = () => { if (tabGrid.first + tabGrid.maxVisibleCells < tabGrid.el.children.length) { tabGrid.first = Math.min(tabGrid.el.children.length - 1, tabGrid.first + tabGrid.maxVisibleCells); tabGrid.setRange(tabGrid.first, tabGrid.first + tabGrid.maxCells); } }; tabGrid.prev = () => { tabGrid.first = Math.max(0, tabGrid.first - tabGrid.maxVisibleCells); tabGrid.setRange(tabGrid.first, tabGrid.first + tabGrid.maxCells); }; /* for the buttons above the tab grid */ tabGrid.ctrlCallbacks = { prev: () => { tabGrid.prev(); return h.hint(); }, next: () => { tabGrid.next(); return h.hint(); }, close: () => { return tri.excmds.tabclose(); }, newtab: () => { h.hide(); return tri.excmds.tabopen(); }, search: () => { h.hide(); return tri.excmds.fillcmdline("taball"); }, }; /* calculate how many tab cells can fit completely within the screen */ tabGrid.calcMaxCells = (numTabs) => { const compStyle = getComputedStyle(tabGrid.el); let gridTop = tabGrid.el.getBoundingClientRect().top; /* px value thanks to that css workaround */ let cellHeightPx = parseFloat(compStyle.backgroundSize); let maxRows = Math.max(1, Math.floor((innerHeight - gridTop) / cellHeightPx)); let numCols = compStyle.gridTemplateColumns.split(" ").length; let maxTabs = compStyle.getPropertyValue("--tritab-max-tabs"); tabGrid.maxVisibleCells = Math.min(numCols * maxRows, maxTabs); tabGrid.maxCells = Math.min(numTabs, maxTabs, tabGrid.maxVisibleCells); }; /* create html elements from tab data */ tabGrid.tabsToGrid = async (bTabAll = false) => { const thiswin = (await tri.browserBg.windows.getCurrent()).id; /* to get container info using cookieStoreIds as keys */ let containers = (await tri.browserBg.contextualIdentities.query({})).reduce((acc, cur) => { acc[cur.cookieStoreId] = cur; return acc; }, {}); let tabs = await tri.browserBg.tabs.query(bTabAll ? {} : { currentWindow: true }); let frag = d.createDocumentFragment(); /* for % and # prefixes, could probably neaten this up */ let mostRecentAccessed = 0; let secondMost = 0; let currTab = 0; let prevTab = -1; let winnum = 0; let windexes = {}; tabs.every((tab, i) => { let cell = d.getElementById("tabTemplate").content.cloneNode(true); if (!windexes[tab.windowId]) windexes[tab.windowId] = ++winnum; /* this was slightly more complex than I thought and is now ugly. */ /* checking as we iterate for the two most recently used tabs */ if (tab.windowId === thiswin) { if (tab.lastAccessed > mostRecentAccessed) { secondMost = mostRecentAccessed; mostRecentAccessed = tab.lastAccessed; prevTab = currTab; currTab = i; } else if (t.lastAccessed > secondMost) { secondMost = tab.lastAccessed; prevTab = i; } } if (tab.favIconUrl !== undefined) cell.querySelector(".favicon").src = tab.favIconUrl; else cell.querySelector(".favicon").style.visibility = "hidden"; /* prefixes same as :tab and :taball */ let prefix = ""; if (tab.pinned) prefix += "P"; if (tab.audible) prefix += "A"; if (tab.mutedInfo.muted) prefix += "M"; if (tab.discarded) prefix += "D"; cell.querySelector(".prefix").textContent = prefix; cell.querySelector(".title").textContent = tab.title; cell.querySelector(".url").textContent = tab.url; cell.querySelector(".wintabindex").textContent = (bTabAll ? windexes[tab.windowId] + "." : "") + (tab.index + 1); /* style according to tab containers */ if (tab.incognito) { cell.querySelector(".container").setAttribute("style", `background-image: url("chrome://global/skin/icons/indicator-private-browsing.svg")`); cell.querySelector(".TridactylTab").setAttribute("style", "--tritab-outline-color: var(--tritab-incognito-outline-color);"); } else if (tab.cookieStoreId !== "firefox-default") { cell.querySelector(".container").setAttribute("style", `mask-image:url("${containers[tab.cookieStoreId].iconUrl}"); background-color: ${containers[tab.cookieStoreId].colorCode};`); cell.querySelector(".TridactylTab").setAttribute("style", `--tritab-outline-color: ${containers[tab.cookieStoreId].colorCode};`); } /* tab.id set within the html elements so it's easily accessible when selected as a hint */ cell.querySelector(".TridactylTab").setAttribute("tabid", tab.id); frag.appendChild(cell); return true; }); /* after iterating through all tabs we can correctly add current/previous tab prefixes */ frag.children[currTab].querySelector(".prefix").textContent = "%" + frag.children[currTab].querySelector(".prefix").textContent; if (prevTab > -1) { frag.children[prevTab].querySelector(".prefix").textContent = "#" + frag.children[prevTab].querySelector(".prefix").textContent; } tabGrid.calcMaxCells(tabs.length); tabGrid.setRange(0, tabGrid.maxVisibleCells); /* fill empty spaces with fake tabs so the keys for selecting tabs don't change after pressing next/prev */ if (tabs.length > tabGrid.maxVisibleCells) { for (let i = 0; i < tabGrid.maxVisibleCells - tabs.length % tabGrid.maxVisibleCells; ++i) { frag.appendChild(d.getElementById("fakeTabTemplate").content.cloneNode(true)); } } tabGrid.el.replaceChildren(frag); }; h.hide = () => { h.iframe.style.display = "none"; tabGrid.el.replaceChildren(); }; h.hint = async () => { /* ctrls concatenated so that the tab elements get the choicest keys for hinting */ tri.hinting_content.hintElements(Array.from(tabGrid.el.children).concat(Array.from(d.getElementById("ctrls").children)), { callback: (t) => { /* nothing selected, ie hit <Esc> */ if (!t) { h.hide(); return; } const id = t.getAttribute("tabid"); if (id) { /* keep everything the same and hint again if selecting a fake tab */ /* maybe fake tabs' z-index could be higher than hint spans so you don't even see them? */ if (id === "fake") { return h.hint(); } else { h.hide(); return tri.webext.goToTab(Number(id)); } } else { return tabGrid.ctrlCallbacks[t.id](); } } }); }; h.showAndHint = async (bAllTabs = false) => { h.iframe.style.display = "revert"; await tabGrid.tabsToGrid(bAllTabs); h.hint(); }; h.showAndHint(JS_ARGS[1] === "-a"); }; }; Î©

" Autocmds
autocmd TabEnter .* unfocus
autocmd DocLoad ^https://github.com/tridactyl/tridactyl/issues/new$ issue
autocmd TriStart .* source_quiet

set homepages ["http://localhost:8181"]
